[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Common directories
  \.git
  | \.venv
  | build
  | dist
  | __pycache__
  | \.mypy_cache
  | \.pytest_cache
)/
'''

[tool.ruff]
# Enable all rules that replace our current tools
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    "ERA",  # eradicate (commented code)
    "RUF",  # Ruff-specific rules
]

# Configure to match Black
line-length = 88
target-version = "py38"

# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
    "node_modules",
]

# Ignore specific rules (based on current Flake8 config)
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by Black)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
# Ignore specific rules for test files
"tests/*" = ["D", "S101"]  # No docstrings required, assert allowed
"examples/*" = ["D"]  # No docstrings required

[tool.ruff.pydocstyle]
convention = "google"  # or "numpy" based on project preference

[tool.ruff.isort]
known-first-party = ["services", "models", "utils", "database", "config"]

# Development dependencies for code formatting and linting
[project.optional-dependencies]
dev = [
    "black>=22.0.0,<26.0.0",  # Code formatting
    "ruff>=0.1.0,<1.0.0",    # Fast Python linter
    "pre-commit>=3.0.0",     # Git hooks framework
]
