[build-system]
requires = ["setuptools>=61.0", "wheel>=0.42.0,<1.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "PhenomenalLayout"
version = "1.0.0"
description = "Advanced layout preservation engine for document translation - orchestrating Lingo.dev translation services with Dolphin OCR for pixel-perfect formatting integrity"
readme = {file = "README.md", content-type = "text/markdown"}
license = "MIT"
authors = [
    {name = "PhenomenalLayout Development Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "murmurhash>=1.0.13",
    "numpy>=1.26.4",
    "packaging>=25.0",
    "preshed>=3.0.10",
    "psutil>=5.9.8",
    "pydantic>=2.11.0",
    "pydantic_core>=2.33.0",
    "Pygments>=2.19.0",
    # Legacy PDF engine removed: Dolphin OCR + pdf2image are used instead
]



[tool.setuptools.packages.find]
include = ["services*", "models*", "utils*", "database*", "config*", "core*", "api*", "ui*"]
exclude = ["tests*", "examples*", "scripts*", "docs*", "temp*", "input*", "output*", "downloads*", "static*", "templates*", "assets*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Common directories
  \.git
  | \.venv
  | build
  | dist
  | __pycache__
  | \.mypy_cache
  | \.pytest_cache
)/
'''

[tool.ruff]
# Configure to match Black
line-length = 88
target-version = "py312"

# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
    "node_modules",
]

[tool.ruff.lint]
# Enable all rules that replace our current tools
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez
    "ERA",  # eradicate (commented code)
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules (based on current Flake8 config)
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by Black)
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules for test files
"tests/*" = ["D", "S101"]  # No docstrings required, assert allowed
"examples/*" = ["D", "E402"]  # No docstrings required, allow path manipulation before imports

[tool.ruff.lint.pydocstyle]
convention = "google"  # or "numpy" based on project preference

[tool.ruff.lint.isort]
known-first-party = ["services", "models", "utils", "database", "config", "examples", "core", "api", "ui"]

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict_optional = true
no_implicit_optional = true
check_untyped_defs = true
pretty = true
exclude = [
  "tests/",
  "examples/",
  "scripts/",
]

# Development dependencies are now managed via pip-tools
# See dev-requirements.in for high-level dev dependencies
# See dev-requirements.txt for pinned dev dependencies
[project.optional-dependencies]
dev = [
    # Maintained in dev-requirements.in -> dev-requirements.txt
    # Install with: pip-sync dev-requirements.txt
    "pip-tools>=7.5,<8.0",  # For dependency management
]
