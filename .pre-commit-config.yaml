# Pre-commit Configuration for deeplx-translate-format-intact
# ========================================================
# CI/CD-friendly configuration that only blocks on critical issues.
# Auto-fixing hooks run before commit; if a hook edits files, the commit halts and must be re-run.
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Usage:
#   - Normal commits: Auto-fixes applied after commit, syntax/quality issues block commits
#   - Full linting: pre-commit run --all-files --hook-stage manual
#   - Specific hook: pre-commit run <hook-id> --all-files

repos:
  # Built-in hooks for file validation and auto-fixes (mixed blocking behavior)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Whitespace and line ending fixes (auto-fix, runs before commit)
      # Trailing whitespace is automatically removed before commits
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Automatically removes trailing whitespace from files before commit
        args: [--markdown-linebreak-ext=md]


      - id: end-of-file-fixer
        name: Fix end of file
        description: Ensures files end with a newline before commit

      - id: mixed-line-ending
        name: Fix mixed line endings
        description: Fixes mixed line endings (LF vs CRLF) before commit

      # Syntax validation checks (blocking - prevents broken files)
      - id: check-yaml
        name: Check YAML syntax (blocking)
        description: Validates YAML files for parseable syntax and blocks commits on errors

      - id: check-json
        name: Check JSON syntax (blocking)
        description: Validates JSON files for parseable syntax and blocks commits on errors

      - id: check-toml
        name: Check TOML syntax (blocking)
        description: Validates TOML files for parseable syntax and blocks commits on errors

      - id: check-xml
        name: Check XML syntax (blocking)
        description: Validates XML files for parseable syntax and blocks commits on errors

      # Repository integrity checks (blocking - prevents common issues)
      - id: check-merge-conflict
        name: Check for merge conflicts (blocking)
        description: Detects merge conflict markers and blocks commits containing them

      - id: check-added-large-files
        name: Check for large files (blocking)
        description: Prevents accidentally committing files larger than 1000KB
        args: ['--maxkb=1000']

      - id: check-case-conflict
        name: Check case conflicts (blocking)
        description: Detects case conflicts in filenames and blocks commits on conflicts

      - id: check-symlinks
        name: Check symlinks (blocking)
        description: Detects broken symlinks and blocks commits containing them

      # Syntax and quality checks (blocking - ensures code quality)
      # These hooks validate file integrity and prevent common repository issues
      - id: check-ast
        name: Check Python AST (blocking - syntax errors)
        description: Checks Python files for valid syntax
        files: \.py$

      - id: check-builtin-literals
        name: Check builtin literals (blocking - syntax errors)
        description: Prevents accidentally using builtin names
        files: \.py$

      - id: check-docstring-first
        name: Check docstring first (non-blocking)
        description: Checks docstrings come before code
        files: \.py$
        pass_filenames: false
        always_run: true

      - id: debug-statements
        name: Check debug statements (blocking - syntax errors)
        description: Checks for debugger statements
        files: \.py$

  # Python formatting with Black (non-blocking)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code with Black (non-blocking)
        description: Formats Python code to Black's style (auto-formats files)
        language_version: python3
        # Auto-format files; if files change, pre-commit will halt the commit and you must re-run it
        args: [--quiet]
  # Python linting with Ruff (CI-friendly configuration)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.11
    hooks:
      - id: ruff
        name: Lint Python code with Ruff (non-blocking for CI)
        description: Fast Python linter that auto-fixes issues; --exit-zero prevents exit on violations but file changes from --fix may halt commits
        args: [--fix, --quiet, --exit-zero]
        verbose: false
        # Use --exit-zero to suppress non-zero exit on violations
        # Commits proceed even with linting violations, but may halt if --fix modifies files
      - id: ruff
        name: Lint Python code with Ruff (manual stage - full linting)
        description: Complete Ruff linting with all rules for manual runs
        args: [--fix, --quiet]
        verbose: false
        # Full linting without --exit-zero for manual runs
        # This will block on all violations for comprehensive code quality checks
        pass_filenames: true
        always_run: false
        stages: [manual]

  # Python security checks with bandit (enhanced configuration)
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security check with bandit (high severity and confidence)
        description: Checks Python code for high-severity, high-confidence security issues
        args: [--severity-level, high, --confidence-level, high, --quiet]
        exclude: ^tests/
        verbose: false
        pass_filenames: true
        always_run: false

  # # Python type checking with mypy (temporarily disabled due to SSL issues)
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.4.1
  #   hooks:
  #     - id: mypy
  #       name: Type check with mypy
  #       description: Checks Python code for type errors
  #       args: [
  #         --ignore-missing-imports,
  #         --strict-optional,
  #         --no-error-summary,
  #         --no-pretty,
  #         --cache-dir=/tmp/mypy_cache
  #       ]
  #       files: \.py$
  #       exclude: ^(tests/|examples/)

  # # Markdown linting (temporarily disabled due to SSL issues)
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.35.0
  #   hooks:
  #     - id: markdownlint
  #       name: Lint Markdown files
  #       description: Lints Markdown files for style consistency
  #       args: [--fix, --disable=MD013,MD033]
  #       files: \.md$

  # # YAML linting (temporarily disabled due to SSL issues)
  # - repo: https://github.com/adrienverge/yamllint
  #   rev: v1.32.0
  #   hooks:
  #     - id: yamllint
  #       name: Lint YAML files
  #       description: Lints YAML files for style consistency
  #       args: [--format=parsable, --strict]

  # Additional whitespace checks for specific files
  # Note: Custom whitespace validation removed - handled by built-in hooks

# Configuration for specific tools
default_language_version:
  python: python3

# Do not stop on first failure; note: commits still fail if any hook fails or edits files
fail_fast: false

ci:
  # Auto-update dependencies
  autoupdate_schedule: weekly
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'

# File patterns to exclude globally
exclude: |
  (?x)^(
    \.git/.*|
    \.venv/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    \.tox/.*|
    build/.*|
    dist/.*|
    .*\.egg-info/.*|
    node_modules/.*|
    \.backup_.*
  )$

# Override hook behavior for CI/CD friendliness
# Only critical issues block commits - style/formatting issues are auto-fixed
default_stages: [pre-commit]

# CI/CD Notes:
# ✅ Trailing whitespace: Auto-removed before commit; commit halts if files change
# ✅ Line endings: Auto-fixed before commit; commit halts if files change
# ✅ Mixed line endings: Auto-fixed before commit; commit halts if files change
# ✅ Ruff linting: Two modes available:
#    - Normal commits: Auto-fixes, never blocks
#    - Manual stage: Full linting with blocking on all violations
# ✅ Bandit security: Blocks on high-severity, high-confidence security vulnerabilities
# ✅ Black formatting: Auto-applies formatting, never blocks commits
# ✅ Most style violations: Auto-fixed or ignored in CI environments
#
# For comprehensive linting during development:
#   pre-commit run --all-files --hook-stage manual
#   Or run ruff directly: ruff check --select=ALL .
