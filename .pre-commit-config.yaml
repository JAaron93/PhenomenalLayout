# Pre-commit Configuration for deeplx-translate-format-intact
# ========================================================
# This configuration provides linting and formatting feedback but allows
# commits to proceed even with style violations (non-blocking mode).
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Manual run:
#   pre-commit run --all-files

repos:
  # Built-in hooks for basic file checks (non-blocking)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Whitespace and line ending fixes (auto-fix)
      - id: trailing-whitespace
        name: Remove trailing whitespace (non-blocking)
        description: Removes trailing whitespace from all files
        args: [--markdown-linebreak-ext=md]


      - id: end-of-file-fixer
        name: Fix end of file (non-blocking)
        description: Ensures files end with a newline

      - id: mixed-line-ending
        name: Fix mixed line endings (non-blocking)
        description: Fixes mixed line endings (LF vs CRLF)

      # File formatting checks (non-blocking - just warn)
      - id: check-yaml
        name: Check YAML syntax (non-blocking)
        description: Checks yaml files for parseable syntax

      - id: check-json
        name: Check JSON syntax (non-blocking)
        description: Checks json files for parseable syntax

      - id: check-toml
        name: Check TOML syntax (non-blocking)
        description: Checks toml files for parseable syntax

      - id: check-xml
        name: Check XML syntax (non-blocking)
        description: Checks xml files for parseable syntax

      # Code quality checks (non-blocking - just warn)
      - id: check-merge-conflict
        name: Check for merge conflicts (non-blocking)
        description: Checks for merge conflict markers

      - id: check-added-large-files
        name: Check for large files (non-blocking)
        description: Prevents giant files from being committed
        args: ['--maxkb=1000']

      - id: check-case-conflict
        name: Check case conflicts (non-blocking)
        description: Checks for case conflicts in filenames

      - id: check-symlinks
        name: Check symlinks (non-blocking)
        description: Checks for broken symlinks

      # Python-specific checks (critical ones remain blocking)
      - id: check-ast
        name: Check Python AST (blocking - syntax errors)
        description: Checks Python files for valid syntax
        files: \.py$

      - id: check-builtin-literals
        name: Check builtin literals (blocking - syntax errors)
        description: Prevents accidentally using builtin names
        files: \.py$

      - id: check-docstring-first
        name: Check docstring first (non-blocking)
        description: Checks docstrings come before code
        files: \.py$
        pass_filenames: false
        always_run: true

      - id: debug-statements
        name: Check debug statements (blocking - syntax errors)
        description: Checks for debugger statements
        files: \.py$

  # Python formatting with Black (non-blocking)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code with Black (non-blocking)
        description: Formats Python code to Black's style (auto-formats files)
        language_version: python3
        # Auto-format files but don't block commit on formatting violations
        args: [--quiet]

  # Python linting with Ruff (non-blocking)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.11
    hooks:
      - id: ruff
        name: Lint Python code with Ruff (non-blocking)
        description: Fast Python linter replacing Flake8, isort, and more (auto-fixes and allows commits)
        args: [--fix, --quiet, --exit-zero]
        verbose: false
        # Allow commits even with linting violations
        pass_filenames: false
        always_run: true

  # # Python security checks with bandit (temporarily disabled - config issues)
  # - repo: https://github.com/pycqa/bandit
  #   rev: 1.7.5
  #   hooks:
  #     - id: bandit
  #       name: Security check with bandit (non-blocking)
  #       description: Checks Python code for security issues (reports only, allows commits)
  #       args: [--exit-zero, --quiet]
  #       exclude: ^tests/
  #       verbose: false
  #       # Always run but don't block commits
  #       pass_filenames: false
  #       always_run: true

  # # Python type checking with mypy (temporarily disabled due to SSL issues)
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.4.1
  #   hooks:
  #     - id: mypy
  #       name: Type check with mypy
  #       description: Checks Python code for type errors
  #       args: [
  #         --ignore-missing-imports,
  #         --strict-optional,
  #         --no-error-summary,
  #         --no-pretty,
  #         --cache-dir=/tmp/mypy_cache
  #       ]
  #       files: \.py$
  #       exclude: ^(tests/|examples/)

  # # Markdown linting (temporarily disabled due to SSL issues)
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.35.0
  #   hooks:
  #     - id: markdownlint
  #       name: Lint Markdown files
  #       description: Lints Markdown files for style consistency
  #       args: [--fix, --disable=MD013,MD033]
  #       files: \.md$

  # # YAML linting (temporarily disabled due to SSL issues)
  # - repo: https://github.com/adrienverge/yamllint
  #   rev: v1.32.0
  #   hooks:
  #     - id: yamllint
  #       name: Lint YAML files
  #       description: Lints YAML files for style consistency
  #       args: [--format=parsable, --strict]

  # Additional whitespace checks for specific files
  # Note: Custom whitespace validation removed - handled by built-in hooks

# Configuration for specific tools
default_language_version:
  python: python3

# Make all hooks non-blocking (allow commits even with failures)
fail_fast: false

ci:
  # Auto-update dependencies
  autoupdate_schedule: weekly
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'

# File patterns to exclude globally
exclude: |
  (?x)^(
    \.git/.*|
    \.venv/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    \.tox/.*|
    build/.*|
    dist/.*|
    .*\.egg-info/.*|
    node_modules/.*|
    \.backup_.*
  )$

# Override hook behavior to make them non-blocking
# This ensures commits proceed even if hooks fail
default_stages: [pre-commit]
